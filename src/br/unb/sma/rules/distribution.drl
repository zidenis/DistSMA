package br.unb.sma.rules;

import br.unb.sma.entities.ProcessoCompleto;
import br.unb.sma.entities.FaseProcessual;
import br.unb.sma.entities.HistDistribuicao;
import br.unb.sma.entities.Competencia;
import br.unb.sma.entities.ComposicaoOj;
import br.unb.sma.entities.Sorteio;
import br.unb.sma.entities.Impedimento;

import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Set;
import java.util.Random;
import java.util.ArrayList;

dialect  "java"

rule "Distribuição por dependência para processos que estão relacionados a outros processos que já foram anteriormente distribuídos"
activation-group "mutex"
salience 10
    when
        $pc : ProcessoCompleto(faseAnterior == null, fasesProcRel != null, $fasesAtu : fasesProcRel)
        $fase : FaseProcessual(codMagistrado != null) from $fasesAtu
        $distribuicao : HistDistribuicao()
    then
        String nomeRegra = drools.getRule().getName();
        String codMagistrado = $fase.getCodMagistrado();
        String sigOJ = $fase.getSigOj();
        String txtDistribuicao = "ProcessoRelacionado{" + $fase + "}";
        buildDistribuicao($distribuicao, $pc, "D", nomeRegra, codMagistrado, sigOJ, txtDistribuicao);
end

rule "Distribuição por prevenção para processos em nova fase e que devem ser encaminhados para o mesmo Magistrado da fase anterior"
activation-group "mutex"
    when
        $pc : ProcessoCompleto(faseAnterior != null)
        $distribuicao : HistDistribuicao()
    then
        String nomeRegra = drools.getRule().getName();
        String codMagistrado = $pc.getFaseAnterior().getCodMagistrado();
        String sigOJ = $pc.getFaseAnterior().getSigOj();
        String txtDistribuicao = $pc.getFaseAnterior().toString();
        buildDistribuicao($distribuicao, $pc, "P", nomeRegra, codMagistrado, sigOJ, txtDistribuicao);
end

rule "Distribuição ordinária mediante sorteio dos Magistrados que compõe os Orgãos Judicantes Competentes"
activation-group "mutex"
    when
        $pc : ProcessoCompleto(faseAnterior == null, fasesProcRel == null, faseAtual != null, $classe : faseAtual.sigClasse)
        $listSigOJsCompetentes : List() from accumulate(Competencia(sigClasse == $classe, $sigOJ : sigOj), collectList($sigOJ))
        $listComposicoesOJs : Set() from collect(ComposicaoOj(sigOj memberOf $listSigOJsCompetentes))
        $magsImpedidos : Set() from accumulate(Impedimento($codMag : codMagistrado), collectSet($codMag))
        $distribuicao : HistDistribuicao()
    then
        String nomeRegra = drools.getRule().getName();
        String tipoDistribuicao;
        String codMagistradoSorteado = null;
        Random rnd = new Random();
        String sigOJSorteado = (String) $listSigOJsCompetentes.get(rnd.nextInt($listSigOJsCompetentes.size()));
        List<String> listCodMagsOJSorteado = makeListOfCodMagFromOJ($listComposicoesOJs, sigOJSorteado);
        Sorteio sorteio = new Sorteio($listSigOJsCompetentes, sigOJSorteado, listCodMagsOJSorteado, $magsImpedidos, null);
        if (listCodMagsOJSorteado.size() > 0) {
            tipoDistribuicao = "O";
            codMagistradoSorteado = listCodMagsOJSorteado.get(rnd.nextInt(listCodMagsOJSorteado.size()));
            sorteio.setCodMagistradoSorteado(codMagistradoSorteado);
            if ($magsImpedidos.contains(codMagistradoSorteado)) {
                tipoDistribuicao = "N";
                sorteio.setCodMagistradoSorteado(codMagistradoSorteado + " sorteado é impedido");
                codMagistradoSorteado = null;
            }
        } else {
            tipoDistribuicao = "N";
            sorteio.setCodMagistradoSorteado("não há magistrado disponível para sorteio");
        }
        String txtDistribuicao = sorteio.toString();
        buildDistribuicao($distribuicao, $pc, tipoDistribuicao, nomeRegra, codMagistradoSorteado, sigOJSorteado, txtDistribuicao);
end

rule "Ausência de regra específica para a distribuição"
activation-group "mutex"
salience -1000
    when
        $pc : ProcessoCompleto()
        $distribuicao : HistDistribuicao()
    then
        String nomeRegra = drools.getRule().getName();
        buildDistribuicao($distribuicao, $pc, "N", nomeRegra, null, null, "");
end


function void buildDistribuicao(HistDistribuicao histDistribuicao, ProcessoCompleto pc, String codTipoDist, String regraAplicada, String codMagistrado, String sigOJ, String txtDistribuicao) {
    LocalDateTime now = LocalDateTime.now();
    histDistribuicao.setDtaDistribuicao(Timestamp.valueOf(now));
    histDistribuicao.setCodProcesso(pc.getProcesso().getCodProcesso());
    histDistribuicao.setCodTipoDist(codTipoDist);
    histDistribuicao.setTxtRegraAplicada(regraAplicada);
    histDistribuicao.setTxtDistribuicao(txtDistribuicao);
    histDistribuicao.setCodMagistrado(codMagistrado);
    histDistribuicao.setSigOj(sigOJ);
}

function List<String> makeListOfCodMagFromOJ(Set composicoesOJ, String sigOJSorteado) {
        List<String> listCodMagsOJSorteado = new ArrayList<>();
        for (Object cojObj : composicoesOJ) {
            ComposicaoOj coj = (ComposicaoOj) cojObj;
            if (coj.getSigOj().equals(sigOJSorteado)) {
                listCodMagsOJSorteado.add(coj.getCodMagistrado());
            }
        }
        return listCodMagsOJSorteado;
}